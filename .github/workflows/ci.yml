name: ci
on:
  pull_request:
  push:
    branches:
    - main
jobs:
  build:
    name: build
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    runs-on: ${{ matrix.os }}
    strategy:
       matrix:
        build: [linux, linux-arm, macos, win-msvc, win-gnu, win32-msvc]
        include:
        - build: linux
          os: ubuntu-22.04
          rust: nightly
          target: x86_64-unknown-linux-musl
        - build: linux-arm
          os: ubuntu-22.04
          rust: nightly
          target: arm-unknown-linux-gnueabihf
        - build: macos
          os: macos-12
          rust: nightly
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-2022
          rust: nightly
          target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-2022
          rust: nightly-x86_64-gnu
          target: x86_64-pc-windows-gnu
        # - build: win32-msvc
        #   os: windows-2022
        #   rust: nightly
        #   target: i686-pc-windows-msvc
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: ⚡ Cache Rust
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: ⚡ Cache Node
      uses: actions/cache@v2
      with:
        path: inspectify/ur/node_modules/
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - uses: taiki-e/install-action@v2
      with:
        tool: just,typeshare-cli,cross

    - uses: jetli/wasm-pack-action@v0.4.0
      with:
        # Optional version of wasm-pack to install(eg. 'v0.9.1', 'latest')
        version: 'latest'

    - name: Build UI
      run: just build-ui

    - name: Use Cross
      shell: bash
      run: |
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Build inspectify and checko
      run: just build-ci ${{ env.TARGET_FLAGS }}

    - name: Upload inspectify binary
      if: matrix.os != 'windows-2022'
      uses: actions/upload-artifact@v3
      with:
        name: inspectify
        path: target/${{ matrix.target }}/release/inspectify
        if-no-files-found: error

    - name: Upload inspectify windows binary
      if: matrix.os == 'windows-2022'
      uses: actions/upload-artifact@v3
      with:
        name: inspectify
        path: target/${{ matrix.target }}/release/inspectify.exe
        if-no-files-found: error

    - name: Upload checko binary
      if: matrix.os != 'windows-2022'
      uses: actions/upload-artifact@v3
      with:
        name: checko
        path: target/${{ matrix.target }}/release/checko
        if-no-files-found: error

    - name: Upload checko windows binary
      if: matrix.os == 'windows-2022'
      uses: actions/upload-artifact@v3
      with:
        name: checko
        path: target/${{ matrix.target }}/release/checko.exe
        if-no-files-found: error
